// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as DownIcon from "../icons/DownIcon.js";
import * as Dropdown from "./Dropdown.js";
import * as MenuList from "./MenuList.js";
import * as GlassIcon from "../icons/GlassIcon.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as DataProvider from "../../hooks/DataProvider.js";
import ReactSelect from "react-select";
import * as ReactSelect$1 from "react-select";
import CountrySelectModuleCss from "./CountrySelect.module.css";

var styles = CountrySelectModuleCss;

function CountrySelect$FlagItem(Props) {
  var data = Props.data;
  return React.createElement("div", {
              className: styles.item
            }, React.createElement("span", {
                  className: "fi fi-" + data.value + " " + styles.flag + ""
                }), React.createElement("span", {
                  className: styles.label
                }, data.label));
}

var make = React.memo(CountrySelect$FlagItem);

var FlagItem = {
  make: make
};

function CountrySelect$ValueItem(Props) {
  var props = Props.props;
  return React.createElement("div", {
              className: styles["value-container"]
            }, React.createElement(GlassIcon.make, {}), React.createElement(ReactSelect$1.components.ValueContainer, props));
}

var make$1 = React.memo(CountrySelect$ValueItem);

var ValueItem = {
  make: make$1
};

function makeValueContainer(props) {
  return React.createElement(make$1, {
              props: props
            });
}

function makeOption(props) {
  return React.createElement("div", {
              className: styles.option
            }, React.createElement(ReactSelect$1.components.Option, props, React.createElement(make, {
                      data: props.data
                    })));
}

function makeNoOptionsMessage(props) {
  return React.createElement("div", {
              className: styles["no-options-message"]
            }, React.createElement(ReactSelect$1.components.NoOptionsMessage, props, React.createElement("div", {
                      className: styles.item
                    }, React.createElement("span", {
                          className: styles.label
                        }, "No items found"))));
}

var getComponents = {
  DropdownIndicator: null,
  ValueContainer: makeValueContainer,
  Option: makeOption,
  MenuList: MenuList.makeMenuList,
  NoOptionsMessage: makeNoOptionsMessage
};

var Components = {
  makeValueContainer: makeValueContainer,
  makeOption: makeOption,
  makeNoOptionsMessage: makeNoOptionsMessage,
  getComponents: getComponents
};

function CountrySelect$TargetButton(Props) {
  var className = Props.className;
  var value = Props.value;
  var toggleOpen = Props.toggleOpen;
  var defaultStyle = styles["target-button"];
  var cn = className !== undefined ? "" + className + " " + defaultStyle + "" : defaultStyle;
  var tmp = {};
  if (className !== undefined) {
    tmp.className = className;
  }
  return React.createElement("button", {
              className: cn,
              type: "button",
              onClick: (function (param) {
                  Curry._1(toggleOpen, undefined);
                })
            }, value !== undefined ? value.label : "Country", React.createElement(DownIcon.make, tmp));
}

var TargetButton = {
  make: CountrySelect$TargetButton
};

var selectListWidth = "250px";

var selectStyles = {
  menu: (function (provided) {
      return Object.assign({}, provided, {
                  marginTop: "0",
                  width: selectListWidth,
                  borderTopLeftRadius: "0",
                  borderTopRightRadius: "0"
                });
    }),
  control: (function (provided) {
      return Object.assign({}, provided, {
                  borderColor: "transparent",
                  borderStyle: "none",
                  borderWidth: "0",
                  padding: "0px 10px",
                  width: selectListWidth,
                  borderBottomLeftRadius: "0",
                  borderBottomRightRadius: "0",
                  boxShadow: "none"
                });
    }),
  option: (function (provided) {
      return Object.assign({}, provided, {
                  padding: "4px 4px 4px 8px"
                });
    }),
  menuList: (function (provided) {
      return Object.assign({}, provided, {
                  width: selectListWidth
                });
    })
};

function CountrySelect(Props) {
  var country = Props.country;
  var className = Props.className;
  var onChange = Props.onChange;
  var match = React.useState(function () {
        return false;
      });
  var setIsOpen = match[1];
  var match$1 = React.useState(function () {
        
      });
  var setValue = match$1[1];
  var value = match$1[0];
  var match$2 = DataProvider.useCountriesData(undefined);
  var countries = match$2[2];
  React.useEffect((function () {
          var value = country !== undefined ? Belt_Array.getByU(countries, (function (c) {
                    return c.value.toLowerCase() === country.toLowerCase();
                  })) : undefined;
          Curry._1(setValue, (function (param) {
                  return value;
                }));
        }), [countries]);
  var tmp = {
    toggleOpen: (function (param) {
        Curry._1(setIsOpen, (function (prev) {
                return !prev;
              }));
      })
  };
  if (className !== undefined) {
    tmp.className = className;
  }
  if (value !== undefined) {
    tmp.value = Caml_option.valFromOption(value);
  }
  var tmp$1 = {
    classNamePrefix: "country-select",
    multi: false,
    autoFocus: true,
    backspaceRemovesValue: false,
    controlShouldRenderValue: false,
    hideSelectedOptions: false,
    isClearable: false,
    menuIsOpen: true,
    ignoreAccents: false,
    filterOption: ReactSelect$1.createFilter({
          ignoreAccents: true
        }),
    options: countries,
    placeholder: "Search",
    components: getComponents,
    styles: selectStyles,
    onChange: (function (country) {
        if (!(country == null)) {
          Curry._1(setValue, (function (param) {
                  return country;
                }));
          Curry._1(setIsOpen, (function (param) {
                  return false;
                }));
          if (onChange !== undefined) {
            return Curry._1(onChange, country);
          } else {
            return ;
          }
        }
        
      })
  };
  if (value !== undefined) {
    tmp$1.value = Caml_option.valFromOption(value);
  }
  return React.createElement(Dropdown.make, {
              isOpen: match[0],
              target: React.createElement(CountrySelect$TargetButton, tmp),
              children: React.createElement(ReactSelect, tmp$1),
              onClose: (function (param) {
                  Curry._1(setIsOpen, (function (param) {
                          return false;
                        }));
                })
            });
}

var make$2 = CountrySelect;

export {
  styles ,
  FlagItem ,
  ValueItem ,
  Components ,
  TargetButton ,
  selectListWidth ,
  selectStyles ,
  make$2 as make,
}
/* styles Not a pure module */
