// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from 'rescript/lib/es6/curry.js';
import * as React from 'react';
import * as DownIcon from '../icons/DownIcon.js';
import * as Dropdown from './Dropdown.js';
import * as MenuList from './MenuList.js';
import * as GlassIcon from '../icons/GlassIcon.js';
import * as Caml_option from 'rescript/lib/es6/caml_option.js';
import * as DataProvider from '../../hooks/DataProvider.js';
import ReactSelect from 'react-select';
import * as ReactSelect$1 from 'react-select';
import CountrySelectModuleCss from './CountrySelect.module.css';

var styles = CountrySelectModuleCss;

function makeValueContainer(props) {
  return React.createElement(
    'div',
    {
      className: styles['value-container'],
    },
    React.createElement(GlassIcon.make, {}),
    React.createElement(ReactSelect$1.components.ValueContainer, props)
  );
}

function makeOption(props) {
  return React.createElement(
    'div',
    {
      className: styles.option,
    },
    React.createElement(
      ReactSelect$1.components.Option,
      props,
      React.createElement(
        'div',
        {
          className: styles.item,
        },
        React.createElement('span', {
          className: 'fi fi-' + props.data.value + ' ' + styles.flag + '',
        }),
        React.createElement(
          'span',
          {
            className: styles.label,
          },
          props.data.label
        )
      )
    )
  );
}

function makeNoOptionsMessage(props) {
  return React.createElement(
    'div',
    {
      className: styles['no-options-message'],
    },
    React.createElement(
      ReactSelect$1.components.NoOptionsMessage,
      props,
      React.createElement(
        'div',
        {
          className: styles.item,
        },
        React.createElement(
          'span',
          {
            className: styles.label,
          },
          'No items found'
        )
      )
    )
  );
}

var getComponents = {
  DropdownIndicator: null,
  ValueContainer: makeValueContainer,
  Option: makeOption,
  MenuList: MenuList.makeMenuList,
  NoOptionsMessage: makeNoOptionsMessage,
};

var Components = {
  makeValueContainer: makeValueContainer,
  makeOption: makeOption,
  makeNoOptionsMessage: makeNoOptionsMessage,
  getComponents: getComponents,
};

function CountrySelect$TargetButton(Props) {
  var value = Props.value;
  var toggleOpen = Props.toggleOpen;
  return React.createElement(
    'button',
    {
      className: styles['target-button'],
      type: 'button',
      onClick: function (param) {
        Curry._1(toggleOpen, undefined);
      },
    },
    value !== undefined ? value.label : 'Country',
    React.createElement(DownIcon.make, {})
  );
}

var TargetButton = {
  make: CountrySelect$TargetButton,
};

var selectStyles = {
  menu: function (provided) {
    return Object.assign({}, provided, {
      marginTop: '0',
      borderTopLeftRadius: '0',
      borderTopRightRadius: '0',
    });
  },
  control: function (provided) {
    return Object.assign({}, provided, {
      borderColor: 'transparent',
      borderStyle: 'none',
      borderWidth: '0',
      margin: '0px 10px',
      borderBottomLeftRadius: '0',
      borderBottomRightRadius: '0',
      boxShadow: 'none',
    });
  },
  option: function (provided) {
    return Object.assign({}, provided, {
      padding: '4px 4px 4px 8px',
    });
  },
};

function CountrySelect(Props) {
  var className = Props.className;
  var match = React.useState(function () {
    return false;
  });
  var setIsOpen = match[1];
  var match$1 = React.useState(function () {});
  var setValue = match$1[1];
  var value = match$1[0];
  var match$2 = DataProvider.useCountriesData(undefined);
  var tmp = {
    toggleOpen: function (param) {
      Curry._1(setIsOpen, function (prev) {
        return !prev;
      });
    },
  };
  if (value !== undefined) {
    tmp.value = Caml_option.valFromOption(value);
  }
  var tmp$1 = {
    multi: false,
    autoFocus: true,
    backspaceRemovesValue: false,
    controlShouldRenderValue: false,
    hideSelectedOptions: false,
    isClearable: false,
    menuIsOpen: true,
    ignoreAccents: false,
    isLoading: match$2[0],
    options: match$2[2],
    placeholder: 'Search',
    components: getComponents,
    styles: selectStyles,
    onChange: function (country) {
      if (!(country == null)) {
        Curry._1(setValue, function (param) {
          return country;
        });
        Curry._1(setIsOpen, function (param) {
          return false;
        });
        console.log(country);
        return;
      }
    },
  };
  if (className !== undefined) {
    tmp$1.className = className;
  }
  if (value !== undefined) {
    tmp$1.value = Caml_option.valFromOption(value);
  }
  return React.createElement(Dropdown.make, {
    isOpen: match[0],
    target: React.createElement(CountrySelect$TargetButton, tmp),
    children: React.createElement(ReactSelect, tmp$1),
    onClose: function (param) {
      Curry._1(setIsOpen, function (param) {
        return false;
      });
    },
  });
}

var make = CountrySelect;

export { styles, Components, TargetButton, selectStyles, make };
/* styles Not a pure module */
