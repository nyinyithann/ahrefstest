// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Util from "../../shared/Util.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Int32 from "rescript/lib/es6/int32.js";
import * as React from "react";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as ReactWindow from "react-window";
import MenuListModuleCss from "./MenuList.module.css";

var styles = MenuListModuleCss;

var cmp = Int32.compare;

var IntCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

function MenuList$MenuItem(Props) {
  var index = Props.index;
  var setMeasuredHeight = Props.setMeasuredHeight;
  var child = Props.child;
  var ref = React.useRef(null);
  React.useLayoutEffect((function () {
          var c = ref.current;
          if (!(c == null)) {
            var h = c.getBoundingClientRect().height;
            if (!Number.isNaN(h)) {
              Curry._2(setMeasuredHeight, index, h | 0);
            }
            
          }
          
        }), [ref.current]);
  return React.createElement("div", {
              ref: ref
            }, child);
}

var MenuItem = {
  make: MenuList$MenuItem
};

function getCurrentIndex(rows) {
  return Belt_Option.getWithDefault(Belt_Array.getIndexBy(rows, (function (x) {
                    return x.props.isFocused;
                  })), 0);
}

function makeMenuList(props) {
  var rows = React.useMemo((function () {
          return Belt_Array.map(React.Children.toArray(props.children), (function (x) {
                        var p = x.props;
                        var match = p.data;
                        if (match !== undefined) {
                          p.innerProps.onMouseOver = null;
                        }
                        return x;
                      }));
        }), [props.children]);
  var currentIndex = React.useMemo((function () {
          return getCurrentIndex(rows);
        }), [rows]);
  var match = React.useState(function () {
        return Belt_Map.make(IntCmp);
      });
  var setMeasuredHeights = match[1];
  var measuredHeights = match[0];
  var list = React.useRef(null);
  var menuHeight = React.useMemo((function () {
          return Belt_Array.reduceWithIndexU(rows, 0, (function (a, param, i) {
                        var mh = Belt_Map.get(measuredHeights, i);
                        if (mh !== undefined) {
                          return a + mh | 0;
                        } else {
                          return a + 25 | 0;
                        }
                      }));
        }), [
        rows,
        measuredHeights
      ]);
  var setMeasuredHeight = function (index, measuredHeight) {
    if (Belt_Map.getWithDefault(measuredHeights, index, -1) === measuredHeight) {
      return ;
    }
    Curry._1(setMeasuredHeights, (function (prev) {
            return Belt_Map.set(prev, index, measuredHeight);
          }));
    var l = list.current;
    if (!(l == null)) {
      l.resetAfterIndex(index);
      return ;
    }
    
  };
  React.useEffect((function () {
          Curry._1(setMeasuredHeights, (function (param) {
                  return Belt_Map.make(IntCmp);
                }));
        }), [rows]);
  React.useEffect((function () {
          var l = list.current;
          if (!(l == null) && currentIndex >= 0) {
            Util.debounce((function (param) {
                      l.scrollToItem(currentIndex, "smart");
                    }), 50)(undefined);
          }
          
        }), [
        currentIndex,
        rows,
        list
      ]);
  return React.createElement("div", {
              className: styles.main
            }, React.createElement(ReactWindow.VariableSizeList, {
                  width: Util.NumberOrString.$$int(300),
                  height: Util.NumberOrString.$$int(Math.min(menuHeight, 200)),
                  itemCount: rows.length,
                  itemSize: (function (index) {
                      return Belt_Option.getWithDefault(Belt_Map.get(measuredHeights, index), 25);
                    }),
                  ref: list,
                  overScanCount: 0,
                  itemData: rows,
                  children: (function (param) {
                      var index = param.index;
                      return React.createElement("div", {
                                  key: String(index),
                                  style: param.style
                                }, React.createElement(MenuList$MenuItem, {
                                      index: index,
                                      setMeasuredHeight: setMeasuredHeight,
                                      child: Caml_array.get(rows, index)
                                    }));
                    })
                }));
}

var defaultRowItemHeight = 25;

export {
  styles ,
  IntCmp ,
  MenuItem ,
  getCurrentIndex ,
  defaultRowItemHeight ,
  makeMenuList ,
}
/* styles Not a pure module */
