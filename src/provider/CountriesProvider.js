// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Model from "../model/Model.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as WebAPI from "../http/WebAPI.js";
import * as ViewModel from "../model/ViewModel.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var initialContextValue_countries = [];

function initialContextValue_loadCountries(param) {
  
}

var initialContextValue = {
  loading: false,
  error: "",
  countries: initialContextValue_countries,
  loadCountries: initialContextValue_loadCountries
};

var context = React.createContext(initialContextValue);

var provider = context.Provider;

function CountriesProvider$CountriesContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider, {
              value: value,
              children: children
            });
}

var Provider = {
  provider: provider,
  make: CountriesProvider$CountriesContext$Provider
};

var CountriesContext = {
  initialContextValue: initialContextValue,
  context: context,
  Provider: Provider
};

var initialState_countries = [];

var initialState = {
  loading: false,
  error: "",
  countries: initialState_countries
};

function reducer(state, action) {
  if (typeof action === "number") {
    return {
            loading: true,
            error: "",
            countries: state.countries
          };
  } else if (action.TAG === /* Error */0) {
    return {
            loading: false,
            error: action._0,
            countries: state.countries
          };
  } else {
    return {
            loading: false,
            error: "",
            countries: action._0
          };
  }
}

function loadCountriesInternal(dispatch, signal) {
  var callback = function (result) {
    if (result.TAG !== /* Ok */0) {
      return Curry._1(dispatch, {
                  TAG: /* Error */0,
                  _0: "Unexpected error occured while reteriving countries data."
                });
    }
    var gist = Model.GistDecoder.decode(result._0);
    if (gist.TAG !== /* Ok */0) {
      return ;
    }
    try {
      var cjson = JSON.parse("{ \"countries\" : " + gist._0.files.countryJsonFile.content + " }");
      var data = ViewModel.CountriesDecoder.decode(cjson);
      if (data.TAG === /* Ok */0) {
        return Curry._1(dispatch, {
                    TAG: /* SuccessCountries */1,
                    _0: data._0.countries
                  });
      } else {
        return Curry._1(dispatch, {
                    TAG: /* Error */0,
                    _0: data._0
                  });
      }
    }
    catch (raw_obj){
      var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
      if (obj.RE_EXN_ID === Js_exn.$$Error) {
        var m = obj._1.message;
        if (m !== undefined) {
          return Curry._1(dispatch, {
                      TAG: /* Error */0,
                      _0: m
                    });
        } else {
          return ;
        }
      }
      throw obj;
    }
  };
  Curry._1(dispatch, /* Loading */0);
  WebAPI.getCountries("https://api.github.com/gists/659db3f4566df459bd59c8a53dc9f71f", callback, Caml_option.some(signal), undefined);
}

function CountriesProvider(Props) {
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var loadCountries = React.useMemo((function () {
          return function (param) {
            return loadCountriesInternal(dispatch, param);
          };
        }), [dispatch]);
  var value_loading = state.loading;
  var value_error = state.error;
  var value_countries = state.countries;
  var value = {
    loading: value_loading,
    error: value_error,
    countries: value_countries,
    loadCountries: loadCountries
  };
  return React.createElement(CountriesProvider$CountriesContext$Provider, {
              value: value,
              children: children
            });
}

function useCountriesContext(param) {
  return React.useContext(context);
}

var make = CountriesProvider;

export {
  CountriesContext ,
  initialState ,
  reducer ,
  loadCountriesInternal ,
  make ,
  useCountriesContext ,
}
/* context Not a pure module */
